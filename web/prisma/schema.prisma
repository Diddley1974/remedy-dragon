generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id           String               @id @default(cuid())
  email        String               @unique @db.Citext
  role         Role                 @default(USER)
  createdAt    DateTime             @default(now())
  updatedAt    DateTime             @updatedAt
  consents     Consent[]
  practitioner PractitionerProfile?
  profile      Profile?
  symptomLogs  SymptomLog[]
  passwordHash String?              @db.VarChar(255)
  Account      Account[]
  Session      Session[]

  @@index([role])
}

model Profile {
  id          String   @id @default(cuid())
  userId      String   @unique
  displayName String?  @db.VarChar(190)
  age         Int?
  sex         String?  @db.VarChar(32)
  medications String[]
  conditions  String[]
  marketingOk Boolean  @default(false)
  researchOk  Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model PractitionerProfile {
  id              String    @id @default(cuid())
  userId          String    @unique
  specialties     String[]
  qualifications  String[]
  insuranceUrl    String?
  kycStatus       KycStatus @default(PENDING)
  stripeAccountId String?   @db.VarChar(255)
  isVerified      Boolean   @default(false)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Consent {
  id        String      @id @default(cuid())
  userId    String
  type      ConsentType
  grantedAt DateTime    @default(now())
  withdrawn Boolean     @default(false)
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, type])
  @@index([type])
}

model Supplement {
  id                String                @id @default(cuid())
  slug              String                @unique @db.VarChar(190)
  name              String                @db.VarChar(190)
  synonyms          String[]
  category          String?               @db.VarChar(120)
  summary           String?
  description       String
  sideEffects       String
  contraindications String
  regulatoryStatus  String?               @db.VarChar(120)
  evidenceLevel     String?               @db.VarChar(120)
  tags              String[]
  createdAt         DateTime              @default(now())
  updatedAt         DateTime              @updatedAt
  references        SupplementReference[]

  @@index([name])
  @@index([category])
  @@index([tags])
@@map("supplement") // <-- maps model Supplement to table public.supplement
}

model TcmRemedy {
  id                String               @id @default(cuid())
  slug              String               @unique @db.VarChar(190)
  namePinyin        String               @db.VarChar(190)
  nameEnglish       String               @db.VarChar(190)
  indications       String
  notes             String
  contraindications String
  createdAt         DateTime             @default(now())
  updatedAt         DateTime             @updatedAt
  ingredients       TcmIngredient[]
  references        TcmRemedyReference[]

  @@index([nameEnglish])
  @@index([namePinyin])
}

model TcmIngredient {
  id       String    @id @default(cuid())
  remedyId String
  english  String    @db.VarChar(190)
  pinyin   String?   @db.VarChar(190)
  amount   String?   @db.VarChar(64)
  remedy   TcmRemedy @relation(fields: [remedyId], references: [id], onDelete: Cascade)
}

model Condition {
  id         String               @id @default(cuid())
  slug       String               @unique @db.VarChar(190)
  title      String               @db.VarChar(190)
  overview   String
  redFlags   String
  createdAt  DateTime             @default(now())
  updatedAt  DateTime             @updatedAt
  references ConditionReference[]
  Rule       Rule[]

  @@index([title])
}

model Symptom {
  id       String   @id @default(cuid())
  slug     String   @unique @db.VarChar(190)
  name     String   @db.VarChar(190)
  synonyms String[]
}

model Rule {
  id           String    @id @default(cuid())
  conditionId  String
  symptomSlugs String[]
  minMatch     Int       @default(1)
  notes        String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  condition    Condition @relation(fields: [conditionId], references: [id], onDelete: Cascade)

  @@index([conditionId])
}

model SymptomLog {
  id           String   @id @default(cuid())
  userId       String
  symptomSlugs String[]
  resultIds    String[]
  createdAt    DateTime @default(now())
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
}

model Interaction {
  id         String                 @id @default(cuid())
  substanceA String                 @db.VarChar(190)
  substanceB String                 @db.VarChar(190)
  severity   Severity
  mechanism  String?
  notes      String?
  references InteractionReference[]

  @@index([substanceA, substanceB])
  @@index([severity])
}

model Reference {
  id                   String                 @id @default(cuid())
  url                  String                 @unique
  title                String
  source               String                 @db.VarChar(120)
  year                 Int?
  ConditionReference   ConditionReference[]
  InteractionReference InteractionReference[]
  SupplementReference  SupplementReference[]
  TcmRemedyReference   TcmRemedyReference[]
}

model SupplementReference {
  supplementId String
  referenceId  String
  reference    Reference  @relation(fields: [referenceId], references: [id], onDelete: Cascade)
  supplement   Supplement @relation(fields: [supplementId], references: [id], onDelete: Cascade)

  @@id([supplementId, referenceId])
}

model TcmRemedyReference {
  tcmRemedyId String
  referenceId String
  reference   Reference @relation(fields: [referenceId], references: [id], onDelete: Cascade)
  tcmRemedy   TcmRemedy @relation(fields: [tcmRemedyId], references: [id], onDelete: Cascade)

  @@id([tcmRemedyId, referenceId])
}

model ConditionReference {
  conditionId String
  referenceId String
  condition   Condition @relation(fields: [conditionId], references: [id], onDelete: Cascade)
  reference   Reference @relation(fields: [referenceId], references: [id], onDelete: Cascade)

  @@id([conditionId, referenceId])
}

model InteractionReference {
  interactionId String
  referenceId   String
  interaction   Interaction @relation(fields: [interactionId], references: [id], onDelete: Cascade)
  reference     Reference   @relation(fields: [referenceId], references: [id], onDelete: Cascade)

  @@id([interactionId, referenceId])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum Role {
  USER
  PRACTITIONER
  ADMIN
}

enum ConsentType {
  PRIVACY_POLICY
  DATA_PROCESSING
  MARKETING
}

enum KycStatus {
  PENDING
  APPROVED
  REJECTED
}

enum Severity {
  MINOR
  MODERATE
  MAJOR
}
